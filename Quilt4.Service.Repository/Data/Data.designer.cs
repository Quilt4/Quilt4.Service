#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quilt4.Service.SqlRepository.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Quilt4")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertVersion(Version instance);
    partial void UpdateVersion(Version instance);
    partial void DeleteVersion(Version instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertIssueType(IssueType instance);
    partial void UpdateIssueType(IssueType instance);
    partial void DeleteIssueType(IssueType instance);
    partial void InsertIssue(Issue instance);
    partial void UpdateIssue(Issue instance);
    partial void DeleteIssue(Issue instance);
    #endregion
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<IssueType> IssueTypes
		{
			get
			{
				return this.GetTable<IssueType>();
			}
		}
		
		public System.Data.Linq.Table<Issue> Issues
		{
			get
			{
				return this.GetTable<Issue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_Projects", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProjectKey;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastUpdateDate;
		
		private string _Name;
		
		private string _DashboardColor;
		
		private int _UserId;
		
		private string _ProjectApiKey;
		
		private EntitySet<Application> _Applications;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectKeyChanging(System.Guid value);
    partial void OnProjectKeyChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDashboardColorChanging(string value);
    partial void OnDashboardColorChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProjectApiKeyChanging(string value);
    partial void OnProjectApiKeyChanged();
    #endregion
		
		public Project()
		{
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DashboardColor", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DashboardColor
		{
			get
			{
				return this._DashboardColor;
			}
			set
			{
				if ((this._DashboardColor != value))
				{
					this.OnDashboardColorChanging(value);
					this.SendPropertyChanging();
					this._DashboardColor = value;
					this.SendPropertyChanged("DashboardColor");
					this.OnDashboardColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectApiKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectApiKey
		{
			get
			{
				return this._ProjectApiKey;
			}
			set
			{
				if ((this._ProjectApiKey != value))
				{
					this.OnProjectApiKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectApiKey = value;
					this.SendPropertyChanged("ProjectApiKey");
					this.OnProjectApiKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Application", Storage="_Applications", ThisKey="ProjectKey", OtherKey="ProjectKey")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationKey;
		
		private System.Guid _ProjectKey;
		
		private string _Name;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastUpdateDate;
		
		private EntitySet<Version> _Versions;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationKeyChanging(System.Guid value);
    partial void OnApplicationKeyChanged();
    partial void OnProjectKeyChanging(System.Guid value);
    partial void OnProjectKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public Application()
		{
			this._Versions = new EntitySet<Version>(new Action<Version>(this.attach_Versions), new Action<Version>(this.detach_Versions));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationKey
		{
			get
			{
				return this._ApplicationKey;
			}
			set
			{
				if ((this._ApplicationKey != value))
				{
					this.OnApplicationKeyChanging(value);
					this.SendPropertyChanging();
					this._ApplicationKey = value;
					this.SendPropertyChanged("ApplicationKey");
					this.OnApplicationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Version", Storage="_Versions", ThisKey="ApplicationKey", OtherKey="ApplicationKey")]
		public EntitySet<Version> Versions
		{
			get
			{
				return this._Versions;
			}
			set
			{
				this._Versions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Session", Storage="_Sessions", ThisKey="ApplicationKey", OtherKey="ApplicationKey")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Application", Storage="_Project", ThisKey="ProjectKey", OtherKey="ProjectKey", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._ProjectKey = value.ProjectKey;
					}
					else
					{
						this._ProjectKey = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Versions(Version entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Versions(Version entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Version")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VersionKey;
		
		private System.Guid _ApplicationKey;
		
		private string _Version1;
		
		private string _SupportToolkitVersion;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastUpdateDate;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<IssueType> _IssueTypes;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionKeyChanging(System.Guid value);
    partial void OnVersionKeyChanged();
    partial void OnApplicationKeyChanging(System.Guid value);
    partial void OnApplicationKeyChanged();
    partial void OnVersion1Changing(string value);
    partial void OnVersion1Changed();
    partial void OnSupportToolkitVersionChanging(string value);
    partial void OnSupportToolkitVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public Version()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._IssueTypes = new EntitySet<IssueType>(new Action<IssueType>(this.attach_IssueTypes), new Action<IssueType>(this.detach_IssueTypes));
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VersionKey
		{
			get
			{
				return this._VersionKey;
			}
			set
			{
				if ((this._VersionKey != value))
				{
					this.OnVersionKeyChanging(value);
					this.SendPropertyChanging();
					this._VersionKey = value;
					this.SendPropertyChanged("VersionKey");
					this.OnVersionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationKey
		{
			get
			{
				return this._ApplicationKey;
			}
			set
			{
				if ((this._ApplicationKey != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationKeyChanging(value);
					this.SendPropertyChanging();
					this._ApplicationKey = value;
					this.SendPropertyChanged("ApplicationKey");
					this.OnApplicationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Version", Storage="_Version1", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Version1
		{
			get
			{
				return this._Version1;
			}
			set
			{
				if ((this._Version1 != value))
				{
					this.OnVersion1Changing(value);
					this.SendPropertyChanging();
					this._Version1 = value;
					this.SendPropertyChanged("Version1");
					this.OnVersion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportToolkitVersion", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string SupportToolkitVersion
		{
			get
			{
				return this._SupportToolkitVersion;
			}
			set
			{
				if ((this._SupportToolkitVersion != value))
				{
					this.OnSupportToolkitVersionChanging(value);
					this.SendPropertyChanging();
					this._SupportToolkitVersion = value;
					this.SendPropertyChanged("SupportToolkitVersion");
					this.OnSupportToolkitVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_Session", Storage="_Sessions", ThisKey="VersionKey", OtherKey="VersionKey")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_IssueType", Storage="_IssueTypes", ThisKey="VersionKey", OtherKey="VersionKey")]
		public EntitySet<IssueType> IssueTypes
		{
			get
			{
				return this._IssueTypes;
			}
			set
			{
				this._IssueTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Version", Storage="_Application", ThisKey="ApplicationKey", OtherKey="ApplicationKey", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Versions.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Versions.Add(this);
						this._ApplicationKey = value.ApplicationKey;
					}
					else
					{
						this._ApplicationKey = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Version = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Version = null;
		}
		
		private void attach_IssueTypes(IssueType entity)
		{
			this.SendPropertyChanging();
			entity.Version = this;
		}
		
		private void detach_IssueTypes(IssueType entity)
		{
			this.SendPropertyChanging();
			entity.Version = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionKey;
		
		private System.DateTime _ClientStartTime;
		
		private System.DateTime _ServerStartTime;
		
		private System.Nullable<System.DateTime> _ClientEndTime;
		
		private System.Nullable<System.DateTime> _ServerEndTime;
		
		private string _CallerIp;
		
		private System.Guid _ApplicationKey;
		
		private System.Guid _VersionKey;
		
		private System.Guid _UserDataKey;
		
		private System.Guid _MachineKey;
		
		private string _Enviroment;
		
		private EntitySet<Issue> _Issues;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<Version> _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionKeyChanging(System.Guid value);
    partial void OnSessionKeyChanged();
    partial void OnClientStartTimeChanging(System.DateTime value);
    partial void OnClientStartTimeChanged();
    partial void OnServerStartTimeChanging(System.DateTime value);
    partial void OnServerStartTimeChanged();
    partial void OnClientEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnClientEndTimeChanged();
    partial void OnServerEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnServerEndTimeChanged();
    partial void OnCallerIpChanging(string value);
    partial void OnCallerIpChanged();
    partial void OnApplicationKeyChanging(System.Guid value);
    partial void OnApplicationKeyChanged();
    partial void OnVersionKeyChanging(System.Guid value);
    partial void OnVersionKeyChanged();
    partial void OnUserDataKeyChanging(System.Guid value);
    partial void OnUserDataKeyChanged();
    partial void OnMachineKeyChanging(System.Guid value);
    partial void OnMachineKeyChanged();
    partial void OnEnviromentChanging(string value);
    partial void OnEnviromentChanged();
    #endregion
		
		public Session()
		{
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			this._Application = default(EntityRef<Application>);
			this._Version = default(EntityRef<Version>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientStartTime", DbType="DateTime NOT NULL")]
		public System.DateTime ClientStartTime
		{
			get
			{
				return this._ClientStartTime;
			}
			set
			{
				if ((this._ClientStartTime != value))
				{
					this.OnClientStartTimeChanging(value);
					this.SendPropertyChanging();
					this._ClientStartTime = value;
					this.SendPropertyChanged("ClientStartTime");
					this.OnClientStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerStartTime", DbType="DateTime NOT NULL")]
		public System.DateTime ServerStartTime
		{
			get
			{
				return this._ServerStartTime;
			}
			set
			{
				if ((this._ServerStartTime != value))
				{
					this.OnServerStartTimeChanging(value);
					this.SendPropertyChanging();
					this._ServerStartTime = value;
					this.SendPropertyChanged("ServerStartTime");
					this.OnServerStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientEndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClientEndTime
		{
			get
			{
				return this._ClientEndTime;
			}
			set
			{
				if ((this._ClientEndTime != value))
				{
					this.OnClientEndTimeChanging(value);
					this.SendPropertyChanging();
					this._ClientEndTime = value;
					this.SendPropertyChanged("ClientEndTime");
					this.OnClientEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerEndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ServerEndTime
		{
			get
			{
				return this._ServerEndTime;
			}
			set
			{
				if ((this._ServerEndTime != value))
				{
					this.OnServerEndTimeChanging(value);
					this.SendPropertyChanging();
					this._ServerEndTime = value;
					this.SendPropertyChanged("ServerEndTime");
					this.OnServerEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallerIp", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string CallerIp
		{
			get
			{
				return this._CallerIp;
			}
			set
			{
				if ((this._CallerIp != value))
				{
					this.OnCallerIpChanging(value);
					this.SendPropertyChanging();
					this._CallerIp = value;
					this.SendPropertyChanged("CallerIp");
					this.OnCallerIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationKey
		{
			get
			{
				return this._ApplicationKey;
			}
			set
			{
				if ((this._ApplicationKey != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationKeyChanging(value);
					this.SendPropertyChanging();
					this._ApplicationKey = value;
					this.SendPropertyChanged("ApplicationKey");
					this.OnApplicationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VersionKey
		{
			get
			{
				return this._VersionKey;
			}
			set
			{
				if ((this._VersionKey != value))
				{
					if (this._Version.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionKeyChanging(value);
					this.SendPropertyChanging();
					this._VersionKey = value;
					this.SendPropertyChanged("VersionKey");
					this.OnVersionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDataKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserDataKey
		{
			get
			{
				return this._UserDataKey;
			}
			set
			{
				if ((this._UserDataKey != value))
				{
					this.OnUserDataKeyChanging(value);
					this.SendPropertyChanging();
					this._UserDataKey = value;
					this.SendPropertyChanged("UserDataKey");
					this.OnUserDataKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MachineKey
		{
			get
			{
				return this._MachineKey;
			}
			set
			{
				if ((this._MachineKey != value))
				{
					this.OnMachineKeyChanging(value);
					this.SendPropertyChanging();
					this._MachineKey = value;
					this.SendPropertyChanged("MachineKey");
					this.OnMachineKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enviroment", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Enviroment
		{
			get
			{
				return this._Enviroment;
			}
			set
			{
				if ((this._Enviroment != value))
				{
					this.OnEnviromentChanging(value);
					this.SendPropertyChanging();
					this._Enviroment = value;
					this.SendPropertyChanged("Enviroment");
					this.OnEnviromentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Issue", Storage="_Issues", ThisKey="SessionKey", OtherKey="SessionKey")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Session", Storage="_Application", ThisKey="ApplicationKey", OtherKey="ApplicationKey", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._ApplicationKey = value.ApplicationKey;
					}
					else
					{
						this._ApplicationKey = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_Session", Storage="_Version", ThisKey="VersionKey", OtherKey="VersionKey", IsForeignKey=true)]
		public Version Version
		{
			get
			{
				return this._Version.Entity;
			}
			set
			{
				Version previousValue = this._Version.Entity;
				if (((previousValue != value) 
							|| (this._Version.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Version.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Version.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._VersionKey = value.VersionKey;
					}
					else
					{
						this._VersionKey = default(System.Guid);
					}
					this.SendPropertyChanged("Version");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueType")]
	public partial class IssueType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IssueTypeKey;
		
		private System.Guid _VersionKey;
		
		private string _Type;
		
		private string _Level;
		
		private string _Message;
		
		private string _StackTrace;
		
		private int _Ticket;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastUpdateDate;
		
		private EntitySet<Issue> _Issues;
		
		private EntityRef<Version> _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueTypeKeyChanging(System.Guid value);
    partial void OnIssueTypeKeyChanged();
    partial void OnVersionKeyChanging(System.Guid value);
    partial void OnVersionKeyChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnTicketChanging(int value);
    partial void OnTicketChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public IssueType()
		{
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			this._Version = default(EntityRef<Version>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueTypeKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IssueTypeKey
		{
			get
			{
				return this._IssueTypeKey;
			}
			set
			{
				if ((this._IssueTypeKey != value))
				{
					this.OnIssueTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._IssueTypeKey = value;
					this.SendPropertyChanged("IssueTypeKey");
					this.OnIssueTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VersionKey
		{
			get
			{
				return this._VersionKey;
			}
			set
			{
				if ((this._VersionKey != value))
				{
					if (this._Version.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionKeyChanging(value);
					this.SendPropertyChanging();
					this._VersionKey = value;
					this.SendPropertyChanged("VersionKey");
					this.OnVersionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket", DbType="Int NOT NULL")]
		public int Ticket
		{
			get
			{
				return this._Ticket;
			}
			set
			{
				if ((this._Ticket != value))
				{
					this.OnTicketChanging(value);
					this.SendPropertyChanging();
					this._Ticket = value;
					this.SendPropertyChanged("Ticket");
					this.OnTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueType_Issue", Storage="_Issues", ThisKey="IssueTypeKey", OtherKey="IssueTypeKey")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_IssueType", Storage="_Version", ThisKey="VersionKey", OtherKey="VersionKey", IsForeignKey=true)]
		public Version Version
		{
			get
			{
				return this._Version.Entity;
			}
			set
			{
				Version previousValue = this._Version.Entity;
				if (((previousValue != value) 
							|| (this._Version.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Version.Entity = null;
						previousValue.IssueTypes.Remove(this);
					}
					this._Version.Entity = value;
					if ((value != null))
					{
						value.IssueTypes.Add(this);
						this._VersionKey = value.VersionKey;
					}
					else
					{
						this._VersionKey = default(System.Guid);
					}
					this.SendPropertyChanged("Version");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueType = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue")]
	public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IssueKey;
		
		private System.Guid _IssueTypeKey;
		
		private System.DateTime _ClientCreationDate;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastUpdateDate;
		
		private System.Guid _SessionKey;
		
		private System.Guid _MachineKey;
		
		private System.Guid _UserDataKey;
		
		private EntityRef<IssueType> _IssueType;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueKeyChanging(System.Guid value);
    partial void OnIssueKeyChanged();
    partial void OnIssueTypeKeyChanging(System.Guid value);
    partial void OnIssueTypeKeyChanged();
    partial void OnClientCreationDateChanging(System.DateTime value);
    partial void OnClientCreationDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnSessionKeyChanging(System.Guid value);
    partial void OnSessionKeyChanged();
    partial void OnMachineKeyChanging(System.Guid value);
    partial void OnMachineKeyChanged();
    partial void OnUserDataKeyChanging(System.Guid value);
    partial void OnUserDataKeyChanged();
    #endregion
		
		public Issue()
		{
			this._IssueType = default(EntityRef<IssueType>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IssueKey
		{
			get
			{
				return this._IssueKey;
			}
			set
			{
				if ((this._IssueKey != value))
				{
					this.OnIssueKeyChanging(value);
					this.SendPropertyChanging();
					this._IssueKey = value;
					this.SendPropertyChanged("IssueKey");
					this.OnIssueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueTypeKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IssueTypeKey
		{
			get
			{
				return this._IssueTypeKey;
			}
			set
			{
				if ((this._IssueTypeKey != value))
				{
					if (this._IssueType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._IssueTypeKey = value;
					this.SendPropertyChanged("IssueTypeKey");
					this.OnIssueTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ClientCreationDate
		{
			get
			{
				return this._ClientCreationDate;
			}
			set
			{
				if ((this._ClientCreationDate != value))
				{
					this.OnClientCreationDateChanging(value);
					this.SendPropertyChanging();
					this._ClientCreationDate = value;
					this.SendPropertyChanged("ClientCreationDate");
					this.OnClientCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MachineKey
		{
			get
			{
				return this._MachineKey;
			}
			set
			{
				if ((this._MachineKey != value))
				{
					this.OnMachineKeyChanging(value);
					this.SendPropertyChanging();
					this._MachineKey = value;
					this.SendPropertyChanged("MachineKey");
					this.OnMachineKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDataKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserDataKey
		{
			get
			{
				return this._UserDataKey;
			}
			set
			{
				if ((this._UserDataKey != value))
				{
					this.OnUserDataKeyChanging(value);
					this.SendPropertyChanging();
					this._UserDataKey = value;
					this.SendPropertyChanged("UserDataKey");
					this.OnUserDataKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueType_Issue", Storage="_IssueType", ThisKey="IssueTypeKey", OtherKey="IssueTypeKey", IsForeignKey=true)]
		public IssueType IssueType
		{
			get
			{
				return this._IssueType.Entity;
			}
			set
			{
				IssueType previousValue = this._IssueType.Entity;
				if (((previousValue != value) 
							|| (this._IssueType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueType.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._IssueType.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._IssueTypeKey = value.IssueTypeKey;
					}
					else
					{
						this._IssueTypeKey = default(System.Guid);
					}
					this.SendPropertyChanged("IssueType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Issue", Storage="_Session", ThisKey="SessionKey", OtherKey="SessionKey", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._SessionKey = value.SessionKey;
					}
					else
					{
						this._SessionKey = default(System.Guid);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
