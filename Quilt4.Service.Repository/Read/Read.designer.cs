#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quilt4.Service.SqlRepository.Read
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Quilt4")]
	public partial class ReadDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserProject(UserProject instance);
    partial void UpdateUserProject(UserProject instance);
    partial void DeleteUserProject(UserProject instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertProjectPageProject(ProjectPageProject instance);
    partial void UpdateProjectPageProject(ProjectPageProject instance);
    partial void DeleteProjectPageProject(ProjectPageProject instance);
    partial void InsertDashboardPageProject(DashboardPageProject instance);
    partial void UpdateDashboardPageProject(DashboardPageProject instance);
    partial void DeleteDashboardPageProject(DashboardPageProject instance);
    #endregion
		
		public ReadDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReadDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReadDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReadDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserProject> UserProjects
		{
			get
			{
				return this.GetTable<UserProject>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPageProject> ProjectPageProjects
		{
			get
			{
				return this.GetTable<ProjectPageProject>();
			}
		}
		
		public System.Data.Linq.Table<DashboardPageProject> DashboardPageProjects
		{
			get
			{
				return this.GetTable<DashboardPageProject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[Read].UserProject")]
	public partial class UserProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ProjectId;
		
		private EntityRef<User> _User;
		
		private EntityRef<DashboardPageProject> _DashboardPageProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    #endregion
		
		public UserProject()
		{
			this._User = default(EntityRef<User>);
			this._DashboardPageProject = default(EntityRef<DashboardPageProject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._DashboardPageProject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProject", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProjects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProjects.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DashboardPageProject_UserProject", Storage="_DashboardPageProject", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public DashboardPageProject DashboardPageProject
		{
			get
			{
				return this._DashboardPageProject.Entity;
			}
			set
			{
				DashboardPageProject previousValue = this._DashboardPageProject.Entity;
				if (((previousValue != value) 
							|| (this._DashboardPageProject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DashboardPageProject.Entity = null;
						previousValue.UserProjects.Remove(this);
					}
					this._DashboardPageProject.Entity = value;
					if ((value != null))
					{
						value.UserProjects.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("DashboardPageProject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[Read].[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private EntitySet<UserProject> _UserProjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._UserProjects = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProjects), new Action<UserProject>(this.detach_UserProjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProject", Storage="_UserProjects", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserProject> UserProjects
		{
			get
			{
				return this._UserProjects;
			}
			set
			{
				this._UserProjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[Read].ProjectPageProject")]
	public partial class ProjectPageProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProjectKey;
		
		private int _ProjectId;
		
		private string _Name;
		
		private string _DashboardColor;
		
		private string _ProjectApiKey;
		
		private EntityRef<DashboardPageProject> _DashboardPageProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectKeyChanging(System.Guid value);
    partial void OnProjectKeyChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDashboardColorChanging(string value);
    partial void OnDashboardColorChanged();
    partial void OnProjectApiKeyChanging(string value);
    partial void OnProjectApiKeyChanged();
    #endregion
		
		public ProjectPageProject()
		{
			this._DashboardPageProject = default(EntityRef<DashboardPageProject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._DashboardPageProject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DashboardColor", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DashboardColor
		{
			get
			{
				return this._DashboardColor;
			}
			set
			{
				if ((this._DashboardColor != value))
				{
					this.OnDashboardColorChanging(value);
					this.SendPropertyChanging();
					this._DashboardColor = value;
					this.SendPropertyChanged("DashboardColor");
					this.OnDashboardColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectApiKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectApiKey
		{
			get
			{
				return this._ProjectApiKey;
			}
			set
			{
				if ((this._ProjectApiKey != value))
				{
					this.OnProjectApiKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectApiKey = value;
					this.SendPropertyChanged("ProjectApiKey");
					this.OnProjectApiKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DashboardPageProject_ProjectPageProject", Storage="_DashboardPageProject", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public DashboardPageProject DashboardPageProject
		{
			get
			{
				return this._DashboardPageProject.Entity;
			}
			set
			{
				DashboardPageProject previousValue = this._DashboardPageProject.Entity;
				if (((previousValue != value) 
							|| (this._DashboardPageProject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DashboardPageProject.Entity = null;
						previousValue.ProjectPageProjects.Remove(this);
					}
					this._DashboardPageProject.Entity = value;
					if ((value != null))
					{
						value.ProjectPageProjects.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("DashboardPageProject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[Read].DashboardPageProject")]
	public partial class DashboardPageProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private System.Guid _ProjectKey;
		
		private string _Name;
		
		private int _VersionCount;
		
		private int _SessionCount;
		
		private int _IssueTypeCount;
		
		private int _IssueCount;
		
		private string _DashboardColor;
		
		private EntitySet<UserProject> _UserProjects;
		
		private EntitySet<ProjectPageProject> _ProjectPageProjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectKeyChanging(System.Guid value);
    partial void OnProjectKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionCountChanging(int value);
    partial void OnVersionCountChanged();
    partial void OnSessionCountChanging(int value);
    partial void OnSessionCountChanged();
    partial void OnIssueTypeCountChanging(int value);
    partial void OnIssueTypeCountChanged();
    partial void OnIssueCountChanging(int value);
    partial void OnIssueCountChanged();
    partial void OnDashboardColorChanging(string value);
    partial void OnDashboardColorChanged();
    #endregion
		
		public DashboardPageProject()
		{
			this._UserProjects = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProjects), new Action<UserProject>(this.detach_UserProjects));
			this._ProjectPageProjects = new EntitySet<ProjectPageProject>(new Action<ProjectPageProject>(this.attach_ProjectPageProjects), new Action<ProjectPageProject>(this.detach_ProjectPageProjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCount", DbType="Int NOT NULL")]
		public int VersionCount
		{
			get
			{
				return this._VersionCount;
			}
			set
			{
				if ((this._VersionCount != value))
				{
					this.OnVersionCountChanging(value);
					this.SendPropertyChanging();
					this._VersionCount = value;
					this.SendPropertyChanged("VersionCount");
					this.OnVersionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionCount", DbType="Int NOT NULL")]
		public int SessionCount
		{
			get
			{
				return this._SessionCount;
			}
			set
			{
				if ((this._SessionCount != value))
				{
					this.OnSessionCountChanging(value);
					this.SendPropertyChanging();
					this._SessionCount = value;
					this.SendPropertyChanged("SessionCount");
					this.OnSessionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueTypeCount", DbType="Int NOT NULL")]
		public int IssueTypeCount
		{
			get
			{
				return this._IssueTypeCount;
			}
			set
			{
				if ((this._IssueTypeCount != value))
				{
					this.OnIssueTypeCountChanging(value);
					this.SendPropertyChanging();
					this._IssueTypeCount = value;
					this.SendPropertyChanged("IssueTypeCount");
					this.OnIssueTypeCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueCount", DbType="Int NOT NULL")]
		public int IssueCount
		{
			get
			{
				return this._IssueCount;
			}
			set
			{
				if ((this._IssueCount != value))
				{
					this.OnIssueCountChanging(value);
					this.SendPropertyChanging();
					this._IssueCount = value;
					this.SendPropertyChanged("IssueCount");
					this.OnIssueCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DashboardColor", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DashboardColor
		{
			get
			{
				return this._DashboardColor;
			}
			set
			{
				if ((this._DashboardColor != value))
				{
					this.OnDashboardColorChanging(value);
					this.SendPropertyChanging();
					this._DashboardColor = value;
					this.SendPropertyChanged("DashboardColor");
					this.OnDashboardColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DashboardPageProject_UserProject", Storage="_UserProjects", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<UserProject> UserProjects
		{
			get
			{
				return this._UserProjects;
			}
			set
			{
				this._UserProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DashboardPageProject_ProjectPageProject", Storage="_ProjectPageProjects", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectPageProject> ProjectPageProjects
		{
			get
			{
				return this._ProjectPageProjects;
			}
			set
			{
				this._ProjectPageProjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.DashboardPageProject = this;
		}
		
		private void detach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.DashboardPageProject = null;
		}
		
		private void attach_ProjectPageProjects(ProjectPageProject entity)
		{
			this.SendPropertyChanging();
			entity.DashboardPageProject = this;
		}
		
		private void detach_ProjectPageProjects(ProjectPageProject entity)
		{
			this.SendPropertyChanging();
			entity.DashboardPageProject = null;
		}
	}
}
#pragma warning restore 1591
